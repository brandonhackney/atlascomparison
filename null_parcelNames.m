function names = null_parcelNames(poiName, varargin)
% names = null_parcelNames(poiName, (threshold))
%
% Generates a list of parcel names that pass a masking procedure
% Input the filename for a POI from your template subject
% specifically checks for files named e.g. sub-04_lh_null_0001.annot.poi
% Compares each parcel in the POI to the list of vertices generated by null_getVertexList
% Optionally input the threshold usd to keep parcels - 
%   Default is that 15% of the parcel must fall within the mask
% Output is a cell array of parcel names that pass this masking process
%
% This 'template POI' list is intended to subset other subjects' data.
% Instead of masking each subject independently based on the vertices,
% we mask one template subject by verts, then mask others by parcel names.
% This ensures each subject has the exact same list of parcels,
% though the constituent vertices may change.


% Ensure you have a valid poiName
% Likely contains a filepath, so drop that part
[~, fname, fext] = fileparts(poiName);
if ~strcmp(fext,'.poi')
    error('First input is not a valid POI filename')
end
% Extract hemisphere string from filename
% Expect hem name to come after first underscore
fnameparts = strsplit(fname,'_');
hem = fnameparts{2}; 
if ~(strcmp(hem,'lh') || strcmp(hem,'rh'))
    error('First input does not specify hemisphere of POI!')
end

% Set the minimum overlap you require a parcel to have with the mask
% e.g. 0.9 means 90% of the parcel must fall within the mask to be kept
if nargin > 1
    threshold = varargin{1};
    assert(isnumeric(threshold), 'Threshold must be a percentage e.g. 0.5');
    assert(threshold >= 0 && threshold <= 1, 'Threshold must be a percentage e.g. 0.5');
else
    % use the original threshold
    % instead of changing this, call the function with your desired value
    threshold = 0.15; 
end

% Get hemisphere index from filename
if strcmp(hem,'lh')
    h = 1;
elseif strcmp(hem,'rh')
    h = 2;
end

% Get a list of vertices used in other atlases, that constitute STS
% This is the mask we compare against
verts = null_getVertexList();
% Load in a single null POI
poi = xff(poiName);
POI = poi.POI;

% Check which parcels in the POI contain vertices from the vertex list
names = [];
for p = 1:length(POI)
    % Calculate amount of overlap required to include parcel,
    % defined as a percentage of the parcel's size.
    % e.g. if threshold is 15% and parcel has 100 vertices,
    % then at least 15 of those vertices must be within the mask.
    % BUT put a lower bound of the whole mask area
    % This allows you to still keep e.g. a whole-hemisphere parcel
    cutoff = min(threshold * numel(POI(p).Vertices), threshold * numel(verts(h).hem));
    check = intersect(verts(h).hem, POI(p).Vertices);
    if ~isempty(check) && numel(check) >= cutoff
        names = [names; {POI(p).Name}];
    end
end
% return master poi list -> names

% clean up - xff is bad about releasing memory
poi.clearObject;
end